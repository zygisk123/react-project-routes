{"ast":null,"code":"var _jsxFileName = \"/Users/zygimantas/Desktop/REACT/react-project-routes/frontend/src/pages/NewEvent.js\";\nimport EventForm from \"../components/EventForm\";\nimport { json, redirect } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NewEvent = () => {\n  return /*#__PURE__*/_jsxDEV(EventForm, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 12\n  }, this);\n};\n_c = NewEvent;\nexport default NewEvent;\nexport async function action(_ref) {\n  let {\n    request,\n    params\n  } = _ref;\n  const data = await request.formData();\n  const eventData = {\n    title: data.get('title'),\n    image: data.get('image'),\n    date: data.get('date'),\n    description: data.get('description')\n  };\n  const response = await fetch('http://localhost:8080/events', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(eventData)\n  });\n  if (response.status === 422) {\n    return response;\n  }\n  if (!response.ok) {\n    throw json({\n      message: 'Could not save event'\n    }, {\n      status: 500\n    });\n  }\n  return redirect('/events');\n}\nvar _c;\n$RefreshReg$(_c, \"NewEvent\");","map":{"version":3,"names":["EventForm","json","redirect","jsxDEV","_jsxDEV","NewEvent","fileName","_jsxFileName","lineNumber","columnNumber","_c","action","_ref","request","params","data","formData","eventData","title","get","image","date","description","response","fetch","method","headers","body","JSON","stringify","status","ok","message","$RefreshReg$"],"sources":["/Users/zygimantas/Desktop/REACT/react-project-routes/frontend/src/pages/NewEvent.js"],"sourcesContent":["import EventForm from \"../components/EventForm\";\nimport { json, redirect } from \"react-router-dom\";\n\nconst NewEvent = () => {\n    return <EventForm />\n}\n\nexport default NewEvent;\n\nexport async function action({request, params}) {\n    const data = await request.formData();\n    const eventData = {\n        title: data.get('title'),\n        image: data.get('image'),\n        date: data.get('date'),\n        description: data.get('description')\n    };\n\n    const response = await fetch('http://localhost:8080/events', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(eventData),\n    })\n    if (response.status === 422) {\n        return response;\n    }\n    if (!response.ok) {\n        throw json({message: 'Could not save event'}, {status: 500});\n    }\n\n    return redirect('/events');\n}"],"mappings":";AAAA,OAAOA,SAAS,MAAM,yBAAyB;AAC/C,SAASC,IAAI,EAAEC,QAAQ,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElD,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EACnB,oBAAOD,OAAA,CAACJ,SAAS;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAAG;AACxB,CAAC;AAAAC,EAAA,GAFKL,QAAQ;AAId,eAAeA,QAAQ;AAEvB,OAAO,eAAeM,MAAMA,CAAAC,IAAA,EAAoB;EAAA,IAAnB;IAACC,OAAO;IAAEC;EAAM,CAAC,GAAAF,IAAA;EAC1C,MAAMG,IAAI,GAAG,MAAMF,OAAO,CAACG,QAAQ,EAAE;EACrC,MAAMC,SAAS,GAAG;IACdC,KAAK,EAAEH,IAAI,CAACI,GAAG,CAAC,OAAO,CAAC;IACxBC,KAAK,EAAEL,IAAI,CAACI,GAAG,CAAC,OAAO,CAAC;IACxBE,IAAI,EAAEN,IAAI,CAACI,GAAG,CAAC,MAAM,CAAC;IACtBG,WAAW,EAAEP,IAAI,CAACI,GAAG,CAAC,aAAa;EACvC,CAAC;EAED,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,EAAE;IACzDC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACL,cAAc,EAAE;IACpB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACZ,SAAS;EAClC,CAAC,CAAC;EACF,IAAIM,QAAQ,CAACO,MAAM,KAAK,GAAG,EAAE;IACzB,OAAOP,QAAQ;EACnB;EACA,IAAI,CAACA,QAAQ,CAACQ,EAAE,EAAE;IACd,MAAM9B,IAAI,CAAC;MAAC+B,OAAO,EAAE;IAAsB,CAAC,EAAE;MAACF,MAAM,EAAE;IAAG,CAAC,CAAC;EAChE;EAEA,OAAO5B,QAAQ,CAAC,SAAS,CAAC;AAC9B;AAAC,IAAAQ,EAAA;AAAAuB,YAAA,CAAAvB,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}